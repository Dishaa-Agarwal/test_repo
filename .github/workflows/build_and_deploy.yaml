# name: Deploy Snowpark Apps
# # Controls when the action will run.
# on:
#   pull_request:
#     branches:
#       - dev
#     types:
#       - closed
#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:
# jobs:
#   lint_dev:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#       - name: Setup Python 3.10
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'
#       - name: Install Python packages
#         run: pip install -r requirements.txt
#       - name: Configure snowcli for linting
#         env:
#           SNOWSQL_ACCOUNT: ${{ secrets.SNOWSQL_ACCOUNT_DEV }}
#           SNOWSQL_USER: ${{ secrets.SNOWSQL_USER_DEV }}
#           SNOWSQL_PWD: ${{ secrets.SNOWSQL_PWD_DEV  }}
#           SNOWSQL_ROLE: ${{ secrets.SNOWSQL_ROLE_DEV  }}
#           SNOWSQL_WAREHOUSE: ${{ secrets.SNOWSQL_WAREHOUSE_DEV  }}
#           SNOWSQL_DATABASE: ${{ secrets.SNOWSQL_DATABASE_DEV  }}
#           SNOWSQL_SCHEMA: ${{ secrets.SNOWSQL_SCHEMA_DEV  }}
#         run: |
#           cd $GITHUB_WORKSPACE
#           echo "[connections.main]" > config
#           echo "accountname = $SNOWSQL_ACCOUNT " >> config
#           echo "username = $SNOWSQL_USER " >> config
#           echo "password = $SNOWSQL_PWD " >> config
#           echo "rolename = $SNOWSQL_ROLE " >> config
#           echo "warehousename = $SNOWSQL_WAREHOUSE " >> config
#           echo "dbname = $SNOWSQL_DATABASE " >> config
#           echo "schemaname = $SNOWSQL_SCHEMA " >> config
#       - name: Lint code using Super Linter
#         uses: super-linter/super-linter@v5.7.2
#         env:
#           VALIDATE_ALL_CODEBASE: "true"  # Set this to "true" if you want to lint all files
#           GITHUB_TOKEN: ${{ secrets.SERVICE_NOW_TOKEN }}
#   deploy:
#     runs-on: ubuntu-latest
#     needs: lint_dev  # Make sure linting is successful before deploying
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#       - name: Setup Python 3.10
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'
#       - name: Install Python packages
#         run: pip install -r requirements.txt
#       - name: Configure snowcli
#         if: ${{ github.ref == 'refs/heads/dev' && github.event.pull_request.merged == true }}
#         env:
#           SNOWSQL_ACCOUNT: ${{ secrets.SNOWSQL_ACCOUNT_DEV }}
#           SNOWSQL_USER: ${{ secrets.SNOWSQL_USER_DEV }}
#           SNOWSQL_PWD: ${{ secrets.SNOWSQL_PWD_DEV  }}
#           SNOWSQL_ROLE: ${{ secrets.SNOWSQL_ROLE_DEV  }}
#           SNOWSQL_WAREHOUSE: ${{ secrets.SNOWSQL_WAREHOUSE_DEV  }}
#           SNOWSQL_DATABASE: ${{ secrets.SNOWSQL_DATABASE_DEV  }}
#           SNOWSQL_SCHEMA: ${{ secrets.SNOWSQL_SCHEMA_DEV  }}
#         run: |
#           cd $GITHUB_WORKSPACE
#           echo "[connections.main]" > config
#           echo "accountname = $SNOWSQL_ACCOUNT " >> config
#           echo "username = $SNOWSQL_USER " >> config
#           echo "password = $SNOWSQL_PWD " >> config
#           echo "rolename = $SNOWSQL_ROLE " >> config
#           echo "warehousename = $SNOWSQL_WAREHOUSE " >> config
#           echo "dbname = $SNOWSQL_DATABASE " >> config
#           echo "schemaname = $SNOWSQL_SCHEMA " >> config
#       - name: Deploy Snowpark apps
#         if: ${{ github.ref == 'refs/heads/dev' && github.event.pull_request.merged == true }}
#         env:
#           FILES: ${{ steps.filenames.outputs.all }}
#         run: python command_center_deploy.py --root_directory=$GITHUB_WORKSPACE --files_list="$FILES"
#       - name: Configure snowcli
#         if: ${{ github.ref == 'refs/heads/test' && github.event.pull_request.merged == true }}
#         env:
#           SNOWSQL_ACCOUNT: ${{ secrets.SNOWSQL_ACCOUNT_TEST }}
#           SNOWSQL_USER: ${{ secrets.SNOWSQL_USER_TEST }}
#           SNOWSQL_PWD: ${{ secrets.SNOWSQL_PWD_TEST  }}
#           SNOWSQL_ROLE: ${{ secrets.SNOWSQL_ROLE_TEST  }}
#           SNOWSQL_WAREHOUSE: ${{ secrets.SNOWSQL_WAREHOUSE_TEST }}
#           SNOWSQL_DATABASE: ${{ secrets.SNOWSQL_DATABASE_TEST  }}
#           SNOWSQL_SCHEMA: ${{ secrets.SNOWSQL_SCHEMA_TEST  }}
#         run: |
#           cd $GITHUB_WORKSPACE
#           echo "[connections.main]" > config
#           echo "accountname = $SNOWSQL_ACCOUNT " >> config
#           echo "username = $SNOWSQL_USER " >> config
#           echo "password = $SNOWSQL_PWD " >> config
#           echo "rolename = $SNOWSQL_ROLE " >> config
#           echo "warehousename = $SNOWSQL_WAREHOUSE " >> config
#           echo "dbname = $SNOWSQL_DATABASE " >> config
#           echo "schemaname = $SNOWSQL_SCHEMA " >> config
#       - name: Deploy Snowpark apps
#         if: ${{ github.ref == 'refs/heads/test' && github.event.pull_request.merged == true }}
#         env:
#           FILES: ${{ steps.filenames.outputs.all }}
#         run: python command_center_deploy.py --root_directory=$GITHUB_WORKSPACE --files_list="$FILES"
#       - name: Configure snowcli
#         if: ${{ github.ref == 'refs/heads/release' && github.event.pull_request.merged == true }}
#         env:
#           SNOWSQL_ACCOUNT: ${{ secrets.SNOWSQL_ACCOUNT_RELEASE }}
#           SNOWSQL_USER: ${{ secrets.SNOWSQL_USER_RELEASE }}
#           SNOWSQL_PWD: ${{ secrets.SNOWSQL_PWD_RELEASE  }}
#           SNOWSQL_ROLE: ${{ secrets.SNOWSQL_ROLE_RELEASE }}
#           SNOWSQL_WAREHOUSE: ${{ secrets.SNOWSQL_WAREHOUSE_RELEASE }}
#           SNOWSQL_DATABASE: ${{ secrets.SNOWSQL_DATABASE_RELEASE  }}
#           SNOWSQL_SCHEMA: ${{ secrets.SNOWSQL_SCHEMA_RELEASE  }}
#         run: |
#           cd $GITHUB_WORKSPACE
#           echo "[connections.main]" > config
#           echo "accountname = $SNOWSQL_ACCOUNT " >> config
#           echo "username = $SNOWSQL_USER " >> config
#           echo "password = $SNOWSQL_PWD " >> config
#           echo "rolename = $SNOWSQL_ROLE " >> config
#           echo "warehousename = $SNOWSQL_WAREHOUSE " >> config
#           echo "dbname = $SNOWSQL_DATABASE " >> config
#           echo "schemaname = $SNOWSQL_SCHEMA " >> config
#       - name: Deploy Snowpark apps
#         if: ${{ github.ref == 'refs/heads/release' && github.event.pull_request.merged == true }}
#         env:
#           FILES: ${{ steps.filenames.outputs.all }}
#         run: python command_center_deploy.py --root_directory=$GITHUB_WORKSPACE --files_list="$FILES"
# name: Deploy Snowpark Apps
# # Controls when the action will run.
# on:
#   pull_request:
#     branches:
#       - dev
#     types:
#       - closed
#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:
# jobs:
#   lint_dev:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#       - name: Setup Python 3.10
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'
#       - name: Install Python packages
#         run: pip install -r requirements.txt
#       - name: Configure snowcli for linting
#         env:
#           SNOWSQL_ACCOUNT: ${{ secrets.SNOWSQL_ACCOUNT_DEV }}
#           SNOWSQL_USER: ${{ secrets.SNOWSQL_USER_DEV }}
#           SNOWSQL_PWD: ${{ secrets.SNOWSQL_PWD_DEV  }}
#           SNOWSQL_ROLE: ${{ secrets.SNOWSQL_ROLE_DEV  }}
#           SNOWSQL_WAREHOUSE: ${{ secrets.SNOWSQL_WAREHOUSE_DEV  }}
#           SNOWSQL_DATABASE: ${{ secrets.SNOWSQL_DATABASE_DEV  }}
#           SNOWSQL_SCHEMA: ${{ secrets.SNOWSQL_SCHEMA_DEV  }}
#         run: |
#           cd $GITHUB_WORKSPACE
#           echo "[connections.main]" > config
#           echo "accountname = $SNOWSQL_ACCOUNT " >> config
#           echo "username = $SNOWSQL_USER " >> config
#           echo "password = $SNOWSQL_PWD " >> config
#           echo "rolename = $SNOWSQL_ROLE " >> config
#           echo "warehousename = $SNOWSQL_WAREHOUSE " >> config
#           echo "dbname = $SNOWSQL_DATABASE " >> config
#           echo "schemaname = $SNOWSQL_SCHEMA " >> config
#       - name: Lint code using Super Linter
#         uses: super-linter/super-linter@v5.7.2
#         env:
#           VALIDATE_ALL_CODEBASE: "true"  # Set this to "true" if you want to lint all files
#           GITHUB_TOKEN: ${{ secrets.SERVICE_NOW_TOKEN }}
#       # - name: Install SQLFluff
#       #   run: pip install sqlfluff
#       # - name: Run SQLFluff
#       #   run: sqlfluff lint Accenture_FeatureStore-dev/tester_sql.sqlfluff
#   deploy:
#     runs-on: ubuntu-latest
#     needs: lint_dev  # Make sure linting is successful before deploying
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#       - name: Setup Python 3.10
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'
#       - name: Install Python packages
#         run: pip install -r requirements.txt
#       - name: Configure snowcli
#         if: ${{ github.ref == 'refs/heads/dev' && github.event.pull_request.merged == true }}
#         env:
#           SNOWSQL_ACCOUNT: ${{ secrets.SNOWSQL_ACCOUNT_DEV }}
#           SNOWSQL_USER: ${{ secrets.SNOWSQL_USER_DEV }}
#           SNOWSQL_PWD: ${{ secrets.SNOWSQL_PWD_DEV  }}
#           SNOWSQL_ROLE: ${{ secrets.SNOWSQL_ROLE_DEV  }}
#           SNOWSQL_WAREHOUSE: ${{ secrets.SNOWSQL_WAREHOUSE_DEV  }}
#           SNOWSQL_DATABASE: ${{ secrets.SNOWSQL_DATABASE_DEV  }}
#           SNOWSQL_SCHEMA: ${{ secrets.SNOWSQL_SCHEMA_DEV  }}
#         run: |
#           cd $GITHUB_WORKSPACE
#           echo "[connections.main]" > config
#           echo "accountname = $SNOWSQL_ACCOUNT " >> config
#           echo "username = $SNOWSQL_USER " >> config
#           echo "password = $SNOWSQL_PWD " >> config
#           echo "rolename = $SNOWSQL_ROLE " >> config
#           echo "warehousename = $SNOWSQL_WAREHOUSE " >> config
#           echo "dbname = $SNOWSQL_DATABASE " >> config
#           echo "schemaname = $SNOWSQL_SCHEMA " >> config
#       - name: Deploy Snowpark apps
#         if: ${{ github.ref == 'refs/heads/dev' && github.event.pull_request.merged == true }}
#         env:
#           FILES: ${{ steps.filenames.outputs.all }}
#         run: python command_center_deploy.py --root_directory=$GITHUB_WORKSPACE --files_list="$FILES"
#       - name: Configure snowcli
#         if: ${{ github.ref == 'refs/heads/test' && github.event.pull_request.merged == true }}
#         env:
#           SNOWSQL_ACCOUNT: ${{ secrets.SNOWSQL_ACCOUNT_TEST }}
#           SNOWSQL_USER: ${{ secrets.SNOWSQL_USER_TEST }}
#           SNOWSQL_PWD: ${{ secrets.SNOWSQL_PWD_TEST  }}
#           SNOWSQL_ROLE: ${{ secrets.SNOWSQL_ROLE_TEST  }}
#           SNOWSQL_WAREHOUSE: ${{ secrets.SNOWSQL_WAREHOUSE_TEST }}
#           SNOWSQL_DATABASE: ${{ secrets.SNOWSQL_DATABASE_TEST  }}
#           SNOWSQL_SCHEMA: ${{ secrets.SNOWSQL_SCHEMA_TEST  }}
#         run: |
#           cd $GITHUB_WORKSPACE
#           echo "[connections.main]" > config
#           echo "accountname = $SNOWSQL_ACCOUNT " >> config
#           echo "username = $SNOWSQL_USER " >> config
#           echo "password = $SNOWSQL_PWD " >> config
#           echo "rolename = $SNOWSQL_ROLE " >> config
#           echo "warehousename = $SNOWSQL_WAREHOUSE " >> config
#           echo "dbname = $SNOWSQL_DATABASE " >> config
#           echo "schemaname = $SNOWSQL_SCHEMA " >> config
#       - name: Deploy Snowpark apps
#         if: ${{ github.ref == 'refs/heads/test' && github.event.pull_request.merged == true }}
#         env:
#           FILES: ${{ steps.filenames.outputs.all }}
#         run: python command_center_deploy.py --root_directory=$GITHUB_WORKSPACE --files_list="$FILES"
#       - name: Configure snowcli
#         if: ${{ github.ref == 'refs/heads/release' && github.event.pull_request.merged == true }}
#         env:
#           SNOWSQL_ACCOUNT: ${{ secrets.SNOWSQL_ACCOUNT_RELEASE }}
#           SNOWSQL_USER: ${{ secrets.SNOWSQL_USER_RELEASE }}
#           SNOWSQL_PWD: ${{ secrets.SNOWSQL_PWD_RELEASE  }}
#           SNOWSQL_ROLE: ${{ secrets.SNOWSQL_ROLE_RELEASE }}
#           SNOWSQL_WAREHOUSE: ${{ secrets.SNOWSQL_WAREHOUSE_RELEASE }}
#           SNOWSQL_DATABASE: ${{ secrets.SNOWSQL_DATABASE_RELEASE  }}
#           SNOWSQL_SCHEMA: ${{ secrets.SNOWSQL_SCHEMA_RELEASE  }}
#         run: |
#           cd $GITHUB_WORKSPACE
#           echo "[connections.main]" > config
#           echo "accountname = $SNOWSQL_ACCOUNT " >> config
#           echo "username = $SNOWSQL_USER " >> config
#           echo "password = $SNOWSQL_PWD " >> config
#           echo "rolename = $SNOWSQL_ROLE " >> config
#           echo "warehousename = $SNOWSQL_WAREHOUSE " >> config
#           echo "dbname = $SNOWSQL_DATABASE " >> config
#           echo "schemaname = $SNOWSQL_SCHEMA " >> config
#       - name: Deploy Snowpark apps
#         if: ${{ github.ref == 'refs/heads/release' && github.event.pull_request.merged == true }}
#         env:
#           FILES: ${{ steps.filenames.outputs.all }}
#         run: python command_center_deploy.py --root_directory=$GITHUB_WORKSPACE --files_list="$FILES"
name: Deploy Snowpark Apps
# Controls when the action will run.
on:
  pull_request:
    types:
      - closed
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Select the target branch for deployment'
        required: true
        default: 'dev'
        options:
          - dev
          - test
          - release
 
jobs:
  lint:
    runs-on: ubuntu-latest
 
    if: ${{ github.event_name == 'workflow_dispatch' && (inputs.target_branch == 'dev' || inputs.target_branch == 'test' || inputs.target_branch == 'release') }}
 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
 
      - name: Setup Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
 
      - name: Install dependencies
        run: pip install -r requirements.txt
 
      - name: Install black
        run: pip install black
 
      - name: Lint code with black
        run: black --line-length 120 .

      - name: Install SQLFLUFF
        run: pip install sqlfluff

      - name: Lint code with SqlFluff
        run: sqlfluff lint --dialect snowflake
 
  deploy:
    runs-on: ubuntu-latest
 
    needs: lint  # Ensure lint job completes before deploying
 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
 
      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
 
      - name: Install Python packages
        run: pip install -r requirements.txt
 
      - name: Set Environment Variables
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "TARGET_BRANCH=${{ inputs.target_branch }}" >> $GITHUB_ENV
          else
            echo "TARGET_BRANCH=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          fi
 
      - name: Configure snowcli
        env:
          SNOWSQL_ACCOUNT: ${{ secrets[format('SNOWSQL_ACCOUNT_{0}', inputs.target_branch)] }}
          SNOWSQL_USER: ${{ secrets[format('SNOWSQL_USER_{0}', inputs.target_branch)] }}
          SNOWSQL_PWD: ${{ secrets[format('SNOWSQL_PWD_{0}', inputs.target_branch)] }}
          SNOWSQL_ROLE: ${{ secrets[format('SNOWSQL_ROLE_{0}', inputs.target_branch)] }}
          SNOWSQL_WAREHOUSE: ${{ secrets[format('SNOWSQL_WAREHOUSE_{0}', inputs.target_branch)] }}
          SNOWSQL_DATABASE: ${{ secrets[format('SNOWSQL_DATABASE_{0}', inputs.target_branch)] }}
          SNOWSQL_SCHEMA: ${{ secrets[format('SNOWSQL_SCHEMA_{0}', inputs.target_branch)] }}
        run: |
          cd $GITHUB_WORKSPACE
          echo "[connections.main]" > config
          echo "accountname = $SNOWSQL_ACCOUNT " >> config
          echo "username = $SNOWSQL_USER " >> config
          echo "password = $SNOWSQL_PWD " >> config
          echo "rolename = $SNOWSQL_ROLE " >> config
          echo "warehousename = $SNOWSQL_WAREHOUSE " >> config
          echo "dbname = $SNOWSQL_DATABASE " >> config
          echo "schemaname = $SNOWSQL_SCHEMA " >> config
 
      - name: Deploy Snowpark apps
        env:
          FILES: ${{ steps.filenames.outputs.all }}
        run: python command_center_deploy.py --root_directory=$GITHUB_WORKSPACE --files_list="$FILES"